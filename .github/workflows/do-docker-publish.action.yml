name: Publish Docker Images to DO

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
    paths:
      - apps/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

env:
  REGISTRY_HOST: 'registry.digitalocean.com/wmca'
  FRONTEND_IMAGE_NAME: 'ang-frontend-builder'
  CLUSTER_IMAGE_NAME: 'cluster-services'
  API_SERVICE_IMAGE_NAME: 'wmca/api'
  DATA_SERVICE_IMAGE_NAME: 'wmca/data-service'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Set GH_SHA for versioning images, Required by docker-compose
        run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_ENV

      - name: Build frontend build image
        run: docker build -t $(echo $REGISTRY_HOST)/$(echo $FRONTEND_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) -f AngBuildDockerfile .

      - name: Build service images
        run: docker-compose -f docker-compose.yml -f docker-compose.prod.yml build

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images for frontend build
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $FRONTEND_IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $FRONTEND_IMAGE_NAME) $(doctl registry repository list-tags $(echo $FRONTEND_IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Remove all old images for cluster api
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $API_SERVICE_IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $API_SERVICE_IMAGE_NAME) $(doctl registry repository list-tags $(echo $API_SERVICE_IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Remove all old images for data-service api
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $DATA_SERVICE_IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $DATA_SERVICE_IMAGE_NAME) $(doctl registry repository list-tags $(echo $DATA_SERVICE_IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push cluster service images to DigitalOcean Container Registry
        run: docker-compose -f docker-compose.yml -f docker-compose.prod.yml push

      - name: Push frontend build image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY_HOST)/$(echo $FRONTEND_IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: FRONTEND_IMAGE_NAME,CLUSTER_IMAGE_NAME,REGISTRY_HOST,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to registry
            GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | head -c7)
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Build frontend & setup frontend
            docker create -ti --name dummy $(echo $REGISTRY_HOST)/$(echo $FRONTEND_IMAGE_NAME):$(echo $GITHUB_SHA_SHORT) bash
            sudo docker cp dummy:/tmp/apps/frontend/dist/frontend/. /var/www/prod
            sudo docker rm -f dummy
            # clean up all images containers, volumes, etc
            docker system prune -af
            # Stop running container
            pushd app-src/ 
            git checkout master && git pull
            GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | head -c7) REGISTRY_HOST=$(echo $REGISTRY_HOST) docker-compose down --rmi all
            GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | head -c7) REGISTRY_HOST=$(echo $REGISTRY_HOST) docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
            # Start up cluster
            GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | head -c7) REGISTRY_HOST=$(echo $REGISTRY_HOST) docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            popd
  gc:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Run Garbage Collection on the Repo
        run: doctl registry gc start --force true
